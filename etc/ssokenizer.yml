# Public part of tokenizer's keypair
seal_key: "$TOKENIZER_SEAL_KEY"

# Apps using sealed secrets with tokenizer will put this token in the
# `Proxy-Authorization` header.
proxy_authorization: "$PROXY_AUTH"

http:
  # Where ssokenizer should listen
  address: ":8080"

# Where users will be sent with the sealed token after the authenticating. The
# string `:name` will be replaced with the provider name. The string `:profile`
# will be replaced with the name of the provider profile. This can also be
# specified on individual providers bellow.
#
# return_url: "https://my.app/sso/:profile/:name/callback"

identity_providers:
  # `google` here is the provider name. Users will go to
  # https://<ssokenizer_url>/<provider_name>/start to start the oauth dance
  google:
    # amazon, bitbucket, facebook, github, gitlab, google, heroku, microsoft,
    # slack, or oauth.
    profile: google

    # OAuth Client ID - received from identity provider
    client_id: "$GOOGLE_CLIENT_ID"

    # OAuth Client Secret - received from identity provider
    client_secret: "$GOOGLE_CLIENT_SECRET"

    # where user should be sent with sealed OAuth token after authenticating
    return_url: "$GOOGLE_RETURN_URL"

    # OAuth scopes to request. Separate scopes with spaces to specify multiple
    # scopes in the same line. This makes pulling them from environment
    # variables easier.
    scopes:
      - "$GOOGLE_SCOPES"

    # These fields only need to be specified when using a custom "oauth"
    # provider profile.
    #
    # auth_url: $PROVIDER_AUTH_URL
    # token_url: $PROVIDER_TOKEN_URL

  # Same configuration except for name and return_url to allow authentication
  # to staging environment with same OAuth client.
  google_staging:
    profile: google
    client_id: "$GOOGLE_CLIENT_ID"
    client_secret: "$GOOGLE_CLIENT_SECRET"
    return_url: "$GOOGLE_STAGING_RETURN_URL"
    scopes:
      - "$GOOGLE_SCOPES"